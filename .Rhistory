#  ) +
theme(axis.text=element_text(size=18, colour=markingscolor),
axis.title=element_text(size=18,face="bold",colour=markingscolor)
,axis.text.x= element_text(colour=markingscolor)
,axis.ticks = element_line(colour=markingscolor)
,legend.text = element_text(colour=markingscolor)
,legend.title = element_text(colour=markingscolor)
) +
theme(axis.line = element_line(color=markingscolor))
}
ApplyFigureThemeWithGrids(p + ylim(.1, 2.5) ) + theme(panel.grid.major = element_line(colour="grey", size=0.5)) )
ApplyFigureThemeWithGrids(p + ylim(.1, 2.5) ) + theme(panel.grid.major = element_line(colour="grey", size=0.5))
ApplyFigureThemeWithGrids(p + ylim(.1, 2.5) ) +
theme(panel.grid.major = element_line(colour="grey", size=0.5)
,panel.grid.minor = element_line(colour="grey", size=0.5)
)
p<-plot_model(glm.orig.fit)
p<-plot_model(glm.orig.fit)
p<-ApplyFigureThemeWithGrids(p + ylim(.1, 2.5) ) +
theme(panel.grid.major = element_line(colour="grey", size=0.5)
,panel.grid.minor = element_line(colour="grey", size=0.5)
)
p
plot_model(glm.orig.fit)
ApplyFigureThemeLargeFontOnly<-function(p,markingscolor = "black") {
p +
theme(axis.text=element_text(size=18, colour=markingscolor),
axis.title=element_text(size=18,face="bold",colour=markingscolor)
,axis.text.x= element_text(colour=markingscolor)
,axis.ticks = element_line(colour=markingscolor)
,legend.text = element_text(colour=markingscolor)
,legend.title = element_text(colour=markingscolor)
) +
theme(axis.line = element_line(color=markingscolor))
}
p<-ApplyFigureThemeLargeFontOnly(p + ylim(.1, 2.5) )
p
ApplyFigureThemeLargeFontOnly<-function(p,markingscolor = "black") {
p +
theme(axis.text=element_text(size=18, colour=markingscolor),
axis.title=element_text(size=18,face="bold",colour=markingscolor)
,axis.text.x= element_text(colour=markingscolor)
)
}
p<-ApplyFigureThemeLargeFontOnly(p + ylim(.1, 2.5) )
p
p<-plot_model(glm.orig.fit)
p<-plot_model(glm.orig.fit)
p<-ApplyFigureThemeLargeFontOnly(p + ylim(.1, 2.5) )
p
ggsave(filename = 'figs/OR-original-model.png', plot=p, width=6, height=6, units='in', dpi=300)
glm.orig.fit
summary(glm.orig.fit)
summary(glm.orig.fit)$Coef
summary(glm.orig.fit)$coef
write.csv(summary(glm.orig.fit)$coef, file='output/OR-original-model.csv', row.names = FALSE)
SaveStdSquareFigure <- function(p, filename) {
ggsave(filename = filename,
plot=p, width=6, height=6, units='in', dpi=300)
}
p<-ggplot(brinati.orig.boot.perf %>% filter(Measure %in% measures), aes(x=Measure, y=Value,  color=Measure)) + geom_boxplot() +
geom_point(data=data.frame(Measure = measures, Value = c(1, 0, 0, 1)), size=3, color='blue') + theme_bw()
df <- as.data.frame(brinati_covid_study_v2_imputed)
df <- as.data.frame(brinati_covid_study_v2.imputed)
nBoot = 100
set.seed(1342349)
trainIdxBoot <- lapply(1:nBoot, function(i) sample(1:nrow(df), size=nrow(df), replace=TRUE))
bootPerf.origdata <- lapply(trainIdxBoot,
function(trainIdx)
assessSingleTrainTest(trainIdx, (1:nrow(df))[-trainIdx], df, glm.model, outcome.var.name = 'SWAB')
)
measures = c('C (ROC)', 'Brier', 'Intercept', 'Slope')
brinati.orig.boot.perf <- data.frame(matrix(
unlist(lapply(bootPerf.origdata, function(boot) boot$test.perf)),
nrow = nBoot, byrow = TRUE))
colnames(brinati.orig.boot.perf) <- names(bootPerf.origdata[[1]]$test.perf)
brinati.orig.boot.perf <- gather(brinati.orig.boot.perf, Measure, Value, Dxy:`S:p`, factor_key = TRUE)
df <- as.data.frame(brinati_covid_study_v2.imputed)
nBoot = 100
set.seed(1342349)
trainIdxBoot <- lapply(1:nBoot, function(i) sample(1:nrow(df), size=nrow(df), replace=TRUE))
bootPerf.origdata <- lapply(trainIdxBoot,
function(trainIdx)
assessSingleTrainTest(trainIdx, (1:nrow(df))[-trainIdx], df, glm.model = SWAB~ ., outcome.var.name = 'SWAB')
)
measures = c('C (ROC)', 'Brier', 'Intercept', 'Slope')
brinati.orig.boot.perf <- data.frame(matrix(
unlist(lapply(bootPerf.origdata, function(boot) boot$test.perf)),
nrow = nBoot, byrow = TRUE))
colnames(brinati.orig.boot.perf) <- names(bootPerf.origdata[[1]]$test.perf)
brinati.orig.boot.perf <- gather(brinati.orig.boot.perf, Measure, Value, Dxy:`S:p`, factor_key = TRUE)
p<-ggplot(brinati.orig.boot.perf %>% filter(Measure %in% measures), aes(x=Measure, y=Value,  color=Measure)) + geom_boxplot() +
geom_point(data=data.frame(Measure = measures, Value = c(1, 0, 0, 1)), size=3, color='blue') + theme_bw()
p<-ApplyFigureTheme(p)
SaveStdSquareFigure(p, 'figs/orig-model-bootstrap-evaluation.png')
p
predicted
cut(predicted, breaks=seq(0, 1, .1)
)
cut(predicted, breaks=seq(0, 1, .1), include.lowest = TRUE)
data.frame(Predicted=predicted, Observed = as.integer(as.character(observed)))
data.frame(Predicted=predicted, Observed = as.integer(as.character(observed))) %>%
mutate(Bins = cut(Predicted, breaks=seq(0, 1, .1), include.lowest = TRUE))
cal_deciles <- data.frame(Predicted=predicted, Observed = as.integer(as.character(observed))) %>%
mutate(Bins = cut(Predicted, breaks=seq(0, 1, .1), include.lowest = TRUE))
cal_deciles %>% group_by(Bisn) %>% summarise(n=n(), Average_Observed = mean(Observed))
cal_deciles %>% group_by(Bins) %>% summarise(n=n(), Average_Observed = mean(Observed))
cal_deciles %>% group_by(Bins) %>% summarise(n=n(), Average_Observed = mean(Observed)) %>%
ggplot(. , aes(x=Bins, y=Average_Observed)) + geom_point()
cal_deciles %>% group_by(Bins) %>% summarise(n=n(), Average_Observed = mean(Observed)) %>%
ggplot(. , aes(x=Bins, y=Average_Observed)) + geom_point() + eom_abline(intercept=0,slope=1,size=1.5)
cal_deciles %>% group_by(Bins) %>% summarise(n=n(), Average_Observed = mean(Observed)) %>%
ggplot(. , aes(x=Bins, y=Average_Observed)) + geom_point() + geom_abline(intercept=0,slope=1,size=1.5)
cal_breaks = seq(0, 1, .1)
cal_deciles <- data.frame(Predicted=predicted, Observed = as.integer(as.character(observed))) %>%
mutate(Bins = cut(Predicted, breaks=cal_breaks, include.lowest = TRUE))
cal_deciles %>% group_by(Bins) %>% summarise(n=n(), Average_Observed = mean(Observed)) %>%
ggplot(. , aes(x=Bins, y=Average_Observed)) + geom_point() + geom_abline(intercept=0,slope=1,size=1.5)
cal_deciles
al_deciles %>% group_by(Bins) %>% summarise(n=n(), Average_Observed = mean(Observed))
cal_deciles %>% group_by(Bins) %>% summarise(n=n(), Average_Observed = mean(Observed))
cal_deciles %>% group_by(Bins) %>% summarise(n=n(), Average_Observed = mean(Observed), Average_Predicted=mean(Predicted))
cal_deciles %>% group_by(Bins) %>% summarise(n=n(), Average_Observed = mean(Observed), Average_Predicted=mean(Predicted)) %>%
ggplot(. , aes(x=Average_Predicted, y=Average_Observed)) + geom_point() + geom_abline(intercept=0,slope=1,size=1.5)
cal_deciles %>% group_by(Bins) %>% summarise(n=n(), Average_Observed = mean(Observed), Average_Predicted=mean(Predicted)) %>%
ggplot(. , aes(x=Average_Predicted, y=Average_Observed)) +
geom_point(size=3, color='blue') +
geom_abline(intercept=0,slope=1,size=1.5)
cal_deciles %>% group_by(Bins) %>% summarise(n=n(), Average_Observed = mean(Observed), Average_Predicted=mean(Predicted)) %>%
ggplot(. , aes(x=Average_Predicted, y=Average_Observed)) +
geom_point(size=3, color='blue') +
geom_abline(intercept=0,slope=1,size=1, alpha=0.7)
cal_deciles %>% group_by(Bins) %>% summarise(n=n(), Average_Observed = mean(Observed), Average_Predicted=mean(Predicted)) %>%
ggplot(. , aes(x=Average_Predicted, y=Average_Observed)) +
geom_point(size=3, color='blue') +
geom_abline(intercept=0,slope=1,size=1, alpha=0.7) + theme_bw()
cal_deciles %>% group_by(Bins) %>% summarise(n=n(), Average_Observed = mean(Observed), Average_Predicted=mean(Predicted)) %>%
ggplot(. , aes(x=Average_Predicted, y=Average_Observed)) +
geom_point(size=3, color='blue') +
geom_abline(intercept=0,slope=1,size=1, alpha=0.7) +
xlab('Predicted')+ylab('Observed')+
scale_y_continuous(limits=c(0,1), expand=c(0,0)) + scale_x_continuous(limits=c(0,1), expand=c(0,0)) +
theme(legend.title=element_blank())+
theme(legend.justification=c(1,0),legend.position=c(1,0))
cal_deciles %>% group_by(Bins) %>% summarise(n=n(), Average_Observed = mean(Observed), Average_Predicted=mean(Predicted)) %>%
ggplot(. , aes(x=Average_Predicted, y=Average_Observed)) +
geom_point(size=3, color='blue') +
geom_abline(intercept=0,slope=1,size=1, alpha=0.7) + theme_bw() +
xlab('Predicted')+ylab('Observed')+
scale_y_continuous(limits=c(0,1), expand=c(0,0)) + scale_x_continuous(limits=c(0,1), expand=c(0,0)) +
theme(legend.title=element_blank())+
theme(legend.justification=c(1,0),legend.position=c(1,0))
cal_deciles_summary <- cal_deciles %>% group_by(Bins) %>% summarise(n=n(), Average_Observed = mean(Observed), Average_Predicted=mean(Predicted))
ggplot(cal_deciles_summary , aes(x=Average_Predicted, y=Average_Observed)) +
geom_point(size=3, color='blue') +
geom_abline(intercept=0,slope=1,size=1, alpha=0.7) + theme_bw() +
xlab('Predicted')+ylab('Observed')+
scale_y_continuous(limits=c(0,1), expand=c(0,0)) + scale_x_continuous(limits=c(0,1), expand=c(0,0)) +
theme(legend.title=element_blank())+
theme(legend.justification=c(1,0),legend.position=c(1,0))
ggplot(cal_deciles_summary , aes(x=Average_Predicted, y=Average_Observed)) +
geom_point(size=3, color='blue') +
geom_abline(intercept=0,slope=1,size=1, alpha=0.7) + theme_bw() +
xlab('Predicted')+ylab('Observed')+
xlim(0,1) + ylim(0,1) +
theme(legend.title=element_blank())+
theme(legend.justification=c(1,0),legend.position=c(1,0))
ApplyFigureThemeLargeFontOnly(p)
p<-ggplot(cal_deciles_summary , aes(x=Average_Predicted, y=Average_Observed)) +
geom_point(size=3, color='blue') +
geom_abline(intercept=0,slope=1,size=1, alpha=0.7) + theme_bw() +
xlab('Predicted')+ylab('Observed')+
xlim(0,1) + ylim(0,1) +
theme(legend.title=element_blank())+
theme(legend.justification=c(1,0),legend.position=c(1,0))
ApplyFigureThemeLargeFontOnly(p)
p<-ggplot(cal_deciles_summary , aes(x=Average_Predicted, y=Average_Observed)) +
geom_point(size=3, color='blue') +
geom_abline(intercept=0,slope=1,size=1, alpha=0.7) + theme_bw() +
xlab('Predicted')+ylab('Observed')+
xlim(0,1) + ylim(0,1) +
theme(legend.title=element_blank())+
theme(legend.justification=c(1,0),legend.position=c(1,0))
p<-ApplyFigureThemeLargeFontOnly(p)
SaveStdSquareFigure(p, 'figs/cal-curve-deciles-all.png')
source('~/Dropbox/My Documents/UCSD/coursework/med 264/predictive analytics/2020 lecture/code/helper functions.R')
ApplyFigureThemeCalCurvePoints(ggplot(cal_deciles_summary , aes(x=Average_Predicted, y=Average_Observed)) )
p<-ApplyFigureThemeCalCurvePoints(ggplot(cal_deciles_summary , aes(x=Average_Predicted, y=Average_Observed)) )
p<-ApplyFigureThemeLargeFontOnly(p)
p
SaveStdSquareFigure(p, 'figs/cal-curve-deciles-all.png')
cal_deciles_summary
for (cutoff in lapply(1:nrow(cal_deciles_summary), function(i) cal_deciles_summary$Bins[1:i])) {
p<-ApplyFigureThemeCalCurvePoints(
ggplot(cal_deciles_summary %>% filter(Bins %in% cutoff), aes(x=Average_Predicted, y=Average_Observed)) )
p<-ApplyFigureThemeLargeFontOnly(p)
ggsave(filename = paste0('figs/example-cal-curve-points-', cutoff[length(cutoff)],  '.png'),
plot=p, width=6, height=6, units='in', dpi=300)
}
??hosmer
performance_hosmer
performance::performance_hosmer
performance::performance_hosmer(glm.orig.fit)
hl.org <- performance_hosmer(glm.orig.fit)
require(performance)
hl.org <- performance_hosmer(glm.orig.fit)
hl.org
hl.org$chisq
require(performance)
hl.org <- performance_hosmer(glm.orig.fit)
hl.org
p<-ApplyFigureThemeCalCurvePoints(ggplot(cal_deciles_summary , aes(x=Average_Predicted, y=Average_Observed)) )
p<-ApplyFigureThemeLargeFontOnly(p)
p
p + ggeom_smooth(method='lm')
p + geom_smooth(method='lm')
?geom_smooth
p + geom_smooth(method='lm', se=FALSE)
p<-ApplyFigureThemeCalCurvePoints(ggplot(cal_deciles_summary , aes(x=Average_Predicted, y=Average_Observed)) )
p<-ApplyFigureThemeLargeFontOnly(p)
SaveStdSquareFigure(p, 'figs/cal-curve-deciles-all.png')
p<-p + geom_smooth(method='lm', se=FALSE)
SaveStdSquareFigure(p, 'figs/cal-curve-deciles-all-with-bestfit.png')
p
p + stat_smooth()
p + stat_smooth(method='lm')
p + stat_summary()
setwd("~/Dropbox/My Documents/UCSD/grants/Michael's device surveillance/code")
CreateSmoothedCalCurvePlot <- function(predicted, observed, ci=0.95) {
dl_adv_plot = data.frame(o = observed, p = predicted)
if (missing(ci)) ci=0.95
attach(list(), name="design.options")
assign('dd', datadist(dl_adv_plot), pos='design.options')
options(datadist="dd")
glm.trend <- glm('o ~ rcs(p, 5)', dl_adv_plot, family='binomial')
X_plot <- seq(0.01, .99, by=.01)
fitVal<-predict(glm.trend, newdata=data.frame(p=X_plot),
se.fit=TRUE)
fv<-data.frame(X=X_plot, Y=plogis(fitVal$fit),
LCL=plogis(fitVal$fit + qnorm((1-ci)/2)* fitVal$se.fit),
UCL=plogis(fitVal$fit + qnorm(ci+(1-ci)/2)* fitVal$se.fit))
byObs<-predict(glm.trend, se.fit=TRUE)
byObsFV<-data.frame(X=dl_adv_plot$p, Y=plogis(byObs$fit),
LCL=plogis(byObs$fit + qnorm((1-ci)/2)* byObs$se.fit),
UCL=plogis(byObs$fit + qnorm(ci+(1-ci)/2)* byObs$se.fit))
#ggplot(fv, aes(x = X, y = Y, ymin = LCL, ymax=UCL)) + geom_line() + geom_ribbon(alpha=0.3)
p<-ggplot(byObsFV %>% unique(), aes(x = X, y = Y, ymin = LCL, ymax=UCL)) + geom_line() + geom_ribbon(alpha=0.3)
p
}
CreateSmoothedCalCurvePlot(predicted, observed)
ApplyFigureThemeCalCurveSmooth <- function(p) {
ApplyFigureThemeCalCurve(p  + geom_line() + geom_ribbon(alpha=0.3))
}
CreateSmoothedCalCurvePlot <- function(predicted, observed, ci=0.95) {
dl_adv_plot = data.frame(o = observed, p = predicted)
if (missing(ci)) ci=0.95
attach(list(), name="design.options")
assign('dd', datadist(dl_adv_plot), pos='design.options')
options(datadist="dd")
glm.trend <- glm('o ~ rcs(p, 5)', dl_adv_plot, family='binomial')
X_plot <- seq(0.01, .99, by=.01)
fitVal<-predict(glm.trend, newdata=data.frame(p=X_plot),
se.fit=TRUE)
fv<-data.frame(X=X_plot, Y=plogis(fitVal$fit),
LCL=plogis(fitVal$fit + qnorm((1-ci)/2)* fitVal$se.fit),
UCL=plogis(fitVal$fit + qnorm(ci+(1-ci)/2)* fitVal$se.fit))
byObs<-predict(glm.trend, se.fit=TRUE)
byObsFV<-data.frame(X=dl_adv_plot$p, Y=plogis(byObs$fit),
LCL=plogis(byObs$fit + qnorm((1-ci)/2)* byObs$se.fit),
UCL=plogis(byObs$fit + qnorm(ci+(1-ci)/2)* byObs$se.fit))
#ggplot(fv, aes(x = X, y = Y, ymin = LCL, ymax=UCL)) + geom_line() + geom_ribbon(alpha=0.3)
p<-ApplyFigureThemeCalCurveSmooth(ggplot(byObsFV %>% unique(), aes(x = X, y = Y, ymin = LCL, ymax=UCL)))
p
}
CreateSmoothedCalCurvePlot(predicted, observed)
# The following cal curve plotting functions are taken from Dr. Sharon Davis (Sharon.Davis@vanderbilt.edu)
CreateSmoothedCalCurveSmoothData <- function(predicted, observed, ci=0.95) {
dl_adv_plot = data.frame(o = observed, p = predicted)
if (missing(ci)) ci=0.95
attach(list(), name="design.options")
assign('dd', datadist(dl_adv_plot), pos='design.options')
options(datadist="dd")
glm.trend <- glm('o ~ rcs(p, 5)', dl_adv_plot, family='binomial')
X_plot <- seq(0.01, .99, by=.01)
fitVal<-predict(glm.trend, newdata=data.frame(p=X_plot),
se.fit=TRUE)
fv<-data.frame(X=X_plot, Y=plogis(fitVal$fit),
LCL=plogis(fitVal$fit + qnorm((1-ci)/2)* fitVal$se.fit),
UCL=plogis(fitVal$fit + qnorm(ci+(1-ci)/2)* fitVal$se.fit))
byObs<-predict(glm.trend, se.fit=TRUE)
byObsFV<-data.frame(X=dl_adv_plot$p, Y=plogis(byObs$fit),
LCL=plogis(byObs$fit + qnorm((1-ci)/2)* byObs$se.fit),
UCL=plogis(byObs$fit + qnorm(ci+(1-ci)/2)* byObs$se.fit))
byObsFV %>% unique()
}
CreateSmoothedCalCurvePlot <- function(predicted, observed, ci=0.95) {
byObsFV<-CreateSmoothedCalCurveSmoothData(predicted, observed, ci)
#ggplot(fv, aes(x = X, y = Y, ymin = LCL, ymax=UCL)) + geom_line() + geom_ribbon(alpha=0.3)
p<-ApplyFigureThemeCalCurveSmooth(ggplot(byObsFV, aes(x = X, y = Y, ymin = LCL, ymax=UCL)))
p
}
CreateSmoothedCalCurvePlot(predicted, observed)
source('~/Dropbox/My Documents/UCSD/coursework/med 264/predictive analytics/2020 lecture/code/helper functions.R')
CreateSmoothedCalCurvePlot(predicted, observed)
source('~/Dropbox/My Documents/UCSD/coursework/med 264/predictive analytics/2020 lecture/code/helper functions.R')
CreateSmoothedCalCurvePlot(predicted, observed)
source('~/Dropbox/My Documents/UCSD/coursework/med 264/predictive analytics/2020 lecture/code/helper functions.R')
CreateSmoothedCalCurvePlot(predicted, observed)
p<-CreateSmoothedCalCurvePlot(predicted, observed)
ApplyFigureThemeLargeFontOnly(p)
p<-CreateSmoothedCalCurvePlot(predicted, observed)
ApplyFigureThemeLargeFontOnly(p)
p<-CreateSmoothedCalCurvePlot(predicted, observed)
p<-ApplyFigureThemeLargeFontOnly(p)
SaveStdSquareFigure(p, 'figs/smoothed-cal-curve-orig-data.png')
p
measures = c('C (ROC)', 'Brier', 'Intercept', 'Slope')
ggplot(dfs.prevs.perf.df %>% filter(Measure %in% measures), aes(x=Measure, y=Value,  color=Measure)) + geom_boxplot() +
geom_point(data=data.frame(Measure = measures, Value = c(1, 0, 0, 1)), size=3, color='blue') + theme_bw()
ggplot(dfs.prevs.perf.df %>% filter(Measure %in% measures), aes(x=Prevalence, y=Value,  color=Measure, group=Measure)) + geom_line() + theme_bw()
p<-ggplot(dfs.prevs.perf.df %>% filter(Measure %in% measures), aes(x=Measure, y=Value,  color=Measure)) + geom_boxplot() +
geom_point(data=data.frame(Measure = measures, Value = c(1, 0, 0, 1)), size=3, color='blue') + theme_bw()
ApplyFigureThemeLargeFontOnly(p)
measures = c('C (ROC)', 'Brier', 'Intercept', 'Slope')
p<-ggplot(dfs.prevs.perf.df %>% filter(Measure %in% measures), aes(x=Measure, y=Value,  color=Measure)) + geom_boxplot() +
geom_point(data=data.frame(Measure = measures, Value = c(1, 0, 0, 1)), size=3, color='blue') + theme_bw()
p<-ApplyFigureThemeLargeFontOnly(p)
SaveStdSquareFigure(p, 'figs/change-in-metrics-due-to-prevalence-boxplot.png')
p
p<-ggplot(dfs.prevs.perf.df %>% filter(Measure %in% measures), aes(x=Prevalence, y=Value,  color=Measure, group=Measure)) + geom_line() + theme_bw()
p<-ApplyFigureThemeLargeFontOnly(p)
SaveStdSquareFigure(p, 'figs/change-in-metrics-due-to-prevalence-linearplot.png')
p
p<-ggplot(dfs.prevs.perf.df %>% filter(Measure %in% measures), aes(x=Prevalence, y=Value,  color=Measure, group=Measure)) + geom_line(size=1.3) + theme_bw()
p<-ApplyFigureTheme(p)
p
SaveStdSquareFigure(p, 'figs/orig-model-bootstrap-evaluation.png')
measures = c('C (ROC)', 'Brier', 'Intercept', 'Slope')
p<-ggplot(dfs.prevs.perf.df %>% filter(Measure %in% measures), aes(x=Measure, y=Value,  color=Measure)) + geom_boxplot() +
geom_point(data=data.frame(Measure = measures, Value = c(1, 0, 0, 1)), size=3, color='blue') + theme_bw()
p<-ApplyFigureThemeLargeFontOnly(p)
SaveStdSquareFigure(p, 'figs/change-in-metrics-due-to-prevalence-boxplot.png')
p
p<-ggplot(dfs.prevs.perf.df %>% filter(Measure %in% measures), aes(x=Prevalence, y=Value,  color=Measure, group=Measure)) + geom_line(size=1.3) + theme_bw()
p<-ApplyFigureThemeLargeFontOnly(p)
SaveStdSquareFigure(p, 'figs/change-in-metrics-due-to-prevalence-linearplot.png')
p
SaveMedRectFigure <- function(p, filename) {
ggsave(filename = filename,
plot=p, width=6, height=8, units='in', dpi=300)
}
measures = c('C (ROC)', 'Brier', 'Intercept', 'Slope')
p<-ggplot(dfs.prevs.perf.df %>% filter(Measure %in% measures), aes(x=Measure, y=Value,  color=Measure)) + geom_boxplot() +
geom_point(data=data.frame(Measure = measures, Value = c(1, 0, 0, 1)), size=3, color='blue') + theme_bw()
p<-ApplyFigureThemeLargeFontOnly(p)
SaveMedRectFigure(p, 'figs/change-in-metrics-due-to-prevalence-boxplot.png')
p
p<-ggplot(dfs.prevs.perf.df %>% filter(Measure %in% measures), aes(x=Prevalence, y=Value,  color=Measure, group=Measure)) + geom_line(size=1.3) + theme_bw()
p<-ApplyFigureThemeLargeFontOnly(p)
SaveMedRectFigure(p, 'figs/change-in-metrics-due-to-prevalence-linearplot.png')
p
SaveMedRectFigure <- function(p, filename) {
ggsave(filename = filename,
plot=p, width=8, height=6, units='in', dpi=300)
}
measures = c('C (ROC)', 'Brier', 'Intercept', 'Slope')
p<-ggplot(dfs.prevs.perf.df %>% filter(Measure %in% measures), aes(x=Measure, y=Value,  color=Measure)) + geom_boxplot() +
geom_point(data=data.frame(Measure = measures, Value = c(1, 0, 0, 1)), size=3, color='blue') + theme_bw()
p<-ApplyFigureThemeLargeFontOnly(p)
SaveMedRectFigure(p, 'figs/change-in-metrics-due-to-prevalence-boxplot.png')
p
p<-ggplot(dfs.prevs.perf.df %>% filter(Measure %in% measures), aes(x=Prevalence, y=Value,  color=Measure, group=Measure)) + geom_line(size=1.3) + theme_bw()
p<-ApplyFigureThemeLargeFontOnly(p)
SaveMedRectFigure(p, 'figs/change-in-metrics-due-to-prevalence-linearplot.png')
p
library(readr)
library(ggplot2)
library(dplyr)
library(rms)
library(synthpop)
library(tidyr)
library(plotly)
library(sjPlot)
source('./helper functions.R')
#
# brinati_covid_study_v2 <- read_csv("data/brinati-covid_study_v2.csv",
# col_types = cols(GENDER = col_factor(levels = c("M",
# "F")), SWAB = col_factor(levels = c("0",
# "1"))))
# brinati_covid_study_v2 <- brinati_covid_study_v2 %>% mutate_if(is.numeric, .funs = function(x) {x+0.001})
# library(mi)
# brainati.mi <- missing_data.frame(as.data.frame(brinati_covid_study_v2), favor_positive = TRUE)
#
#
# brainati.mi<-change(brainati.mi, y=c('Lymphocytes', 'Basophils', 'Monocytes','Eosinophils', 'Basophils'), what='type', to='positive-continuous')
# show(brainati.mi)
# image(brainati.mi)
#
# options(mc.cores = 4)
# imputations <- mi(brainati.mi, n.iter = 90, n.chains = 4, max.minutes = 20)
# show(imputations)
# round(mipply(imputations, mean, to.matrix = TRUE), 3)
# Rhats(imputations)
# dfs <- complete(imputations, m=2)
# brinati_covid_v2.imputed <- dfs[[1]][,1:16]
# write.csv(brinati_covid_v2.imputed, file='./data/brinati-covid_study_v2_imputed.csv', row.names = FALSE)
require(readr)
brinati_covid_study_v2.imputed <- read_csv("data/brinati-covid_study_v2_imputed.csv",
col_types = cols(GENDER = col_factor(levels = c("M",
"F")), SWAB = col_factor(levels = c("0",
"1"))))
glm.orig.fit<-glm(SWAB ~ ., brinati_covid_study_v2.imputed, family='binomial')
glm.orig.fit
write.csv(summary(glm.orig.fit)$coef, file='output/OR-original-model.csv', row.names = FALSE)
predicted = plogis(predict(glm.orig.fit))
observed = brinati_covid_study_v2.imputed$SWAB
assessPerf(predicted, observed)
p<-plot_model(glm.orig.fit)
p<-ApplyFigureThemeLargeFontOnly(p + ylim(.1, 2.5) )
p
ggsave(filename = 'figs/OR-original-model.png', plot=p, width=6, height=6, units='in', dpi=300)
cms.cutoffs <- lapply(seq(0.01,0.99,0.01), function(cutoff) {
ret=confusionMatrix(predicted, observed, cutoff=cutoff)
ret$cutoff = cutoff
ret
})
ff<-data.frame(t(sapply(cms.cutoffs, function(cf) c("Cutoff"=cf$cutoff, "Sensitivty"=cf$sens, "Specificity"=cf$spec))))
colnames(ff) <- c('Cutoff', 'Sensitivity','Specificity')
cutoffs_to_plot <- c(0.09, 0.3, 0.6, 0.9)
p <- ApplyFigureTheme(ff %>% mutate(fpr=1-Specificity) %>% filter(Cutoff %in% cutoffs_to_plot) %>%
ggplot(., aes(x=fpr, y=Sensitivity)) +
geom_point(size=3, color='darkblue') + xlim(0,1) + ylim(0,1)+
xlab('False Positive Rate\n(1-Specificity)') + ylab('True Positive Rate\n(Sensitivity)')
)
ggsave(filename = 'figs/example-sens-spec-on-roc.png', plot=p, width=6, height=6, units='in', dpi=300)
for (cutoff in lapply(1:length(cutoffs_to_plot), function(i) cutoffs_to_plot[1:i])) {
p <- ApplyFigureTheme(ff %>% mutate(fpr=1-Specificity) %>% filter(Cutoff %in% cutoff) %>%
ggplot(., aes(x=fpr, y=Sensitivity)) +
geom_point(size=3, color='darkblue') + xlim(0,1) + ylim(0,1)+
xlab('False Positive Rate\n(1-Specificity)') + ylab('True Positive Rate\n(Sensitivity)')
)
ggsave(filename = paste0('figs/example-sens-spec-on-roc-', cutoff[length(cutoff)],  '.png'),
plot=p, width=6, height=6, units='in', dpi=300)
}
p <- ApplyFigureTheme(
ggplot(ff, aes(x=1-Specificity, y=Sensitivity)) + geom_line()+
geom_ribbon(aes(ymin = 0, ymax=Sensitivity), color=NA, fill='blue',alpha=0.3) +
xlim(0,1) + ylim(0,1)+
xlab('False Positive Rate\n(1-Specificity)') + ylab('True Positive Rate\n(Sensitivity)')
)
ggsave(filename = 'figs/example-roc.png',
plot=p, width=6, height=6, units='in', dpi=300)
p <- ff %>% mutate(fpr=1-Specificity) %>%
ggplot(., aes(x=fpr, y=Sensitivity)) + geom_point(aes(frame=Cutoff)) +
xlab('False Positive Rate (1-Specificity)') + ylab('True Positive Rate\n(Sensitivity)')
ggplotly(p)
cal_breaks = seq(0, 1, .1)
cal_deciles <- data.frame(Predicted=predicted, Observed = as.integer(as.character(observed))) %>%
mutate(Bins = cut(Predicted, breaks=cal_breaks, include.lowest = TRUE))
cal_deciles_summary <- cal_deciles %>% group_by(Bins) %>% summarise(n=n(), Average_Observed = mean(Observed),
Average_Predicted=mean(Predicted))
for (cutoff in lapply(1:nrow(cal_deciles_summary), function(i) cal_deciles_summary$Bins[1:i])) {
p<-ApplyFigureThemeCalCurvePoints(
ggplot(cal_deciles_summary %>% filter(Bins %in% cutoff), aes(x=Average_Predicted, y=Average_Observed)) )
p<-ApplyFigureThemeLargeFontOnly(p)
SaveStdSquareFigure(p, filename = paste0('figs/example-cal-curve-points-', cutoff[length(cutoff)],  '.png'))
}
p<-ApplyFigureThemeCalCurvePoints(ggplot(cal_deciles_summary , aes(x=Average_Predicted, y=Average_Observed)) )
p<-ApplyFigureThemeLargeFontOnly(p)
SaveStdSquareFigure(p, 'figs/cal-curve-deciles-all.png')
p<-p + geom_smooth(method='lm', se=FALSE)
SaveStdSquareFigure(p, 'figs/cal-curve-deciles-all-with-bestfit.png')
p
require(performance)
hl.org <- performance_hosmer(glm.orig.fit)
hl.org
p<-CreateSmoothedCalCurvePlot(predicted, observed)
p<-ApplyFigureThemeLargeFontOnly(p)
SaveStdSquareFigure(p, 'figs/smoothed-cal-curve-orig-data.png')
p
df <- as.data.frame(brinati_covid_study_v2.imputed)
nBoot = 100
set.seed(1342349)
trainIdxBoot <- lapply(1:nBoot, function(i) sample(1:nrow(df), size=nrow(df), replace=TRUE))
bootPerf.origdata <- lapply(trainIdxBoot,
function(trainIdx)
assessSingleTrainTest(trainIdx, (1:nrow(df))[-trainIdx], df, glm.model = SWAB~ ., outcome.var.name = 'SWAB')
)
measures = c('C (ROC)', 'Brier', 'Intercept', 'Slope')
brinati.orig.boot.perf <- data.frame(matrix(
unlist(lapply(bootPerf.origdata, function(boot) boot$test.perf)),
nrow = nBoot, byrow = TRUE))
colnames(brinati.orig.boot.perf) <- names(bootPerf.origdata[[1]]$test.perf)
brinati.orig.boot.perf <- gather(brinati.orig.boot.perf, Measure, Value, Dxy:`S:p`, factor_key = TRUE)
p<-ggplot(brinati.orig.boot.perf %>% filter(Measure %in% measures), aes(x=Measure, y=Value,  color=Measure)) + geom_boxplot() +
geom_point(data=data.frame(Measure = measures, Value = c(1, 0, 0, 1)), size=3, color='blue') + theme_bw()
p<-ApplyFigureTheme(p)
SaveStdSquareFigure(p, 'figs/orig-model-bootstrap-evaluation.png')
p
prevalences = seq(0.01, 0.99, 0.01)
dfs_prevs <- lapply(prevalences, function (prev) brinati.syn.factory(prev = prev))
brinati.syn.factory = generateSyntheticDataFactory(baseDF = brinati_covid_study_v2.imputed, method = 'boot')
brinati.syn.factory = generateSyntheticDataFactory(baseDF = brinati_covid_study_v2.imputed, method = 'boot')
dfs_prevs <- lapply(prevalences, function (prev) brinati.syn.factory(prev = prev))
dfs.prevs.perf <- lapply(dfs_prevs, function(df) {
assessPerf(predicted = plogis(predict(glm.orig.fit, newdata=as.data.frame(df))), observed = df$SWAB)
})
dfs.prevs.perf.df <- data.frame(matrix(unlist(dfs.prevs.perf), nrow = length(prevalences), byrow = TRUE))
colnames(dfs.prevs.perf.df) <- names(dfs.prevs.perf[[1]])
dfs.prevs.perf.df$Prevalence = prevalences
dfs.prevs.perf.df <- gather(dfs.prevs.perf.df, Measure, Value, Dxy:`S:p`, factor_key = TRUE)
setwd("~/Dropbox/My Documents/UCSD/coursework/med 264/predictive analytics/2020 lecture/code")
